package postgres

import (
	"context"

	"github.com/dipdup-net/go-lib/config"
	"github.com/dipdup-net/go-lib/database"
	models "{{ .PackageName }}/internal/storage"
	"github.com/dipdup-net/indexer-sdk/pkg/storage"
	"github.com/dipdup-net/indexer-sdk/pkg/storage/postgres"
	"github.com/go-pg/pg/v10/orm"
)

// Storage -
type Storage struct {
	*postgres.Storage

	State    database.Database

    {{ range $name, $value := .Models -}}
    {{ $name }} models.I{{ $name }}
    {{ end -}}
}

// Create -
func Create(ctx context.Context, cfg config.Database) (Storage, error) {
	strg, err := postgres.Create(ctx, cfg, initDatabase)
	if err != nil {
		return Storage{}, nil
	}

	s := Storage{
		Storage:  strg,
		State:    strg.Connection(),
        {{ range $name, $value := .Models -}}
        {{ $name }}: New{{ $name }}(strg.Connection()),
        {{ end -}}
	}

	return s, nil
}

func initDatabase(ctx context.Context, conn *database.PgGo) error {
	for _, data := range []storage.Model{
		&database.State{}, 
        {{ range $name, $value := .Models -}}
        &models.{{ $name }}{},
        {{ end -}}
	} {
		if err := conn.DB().WithContext(ctx).Model(data).CreateTable(&orm.CreateTableOptions{
			IfNotExists: true,
		}); err != nil {
			if err := conn.Close(); err != nil {
				return err
			}
			return err
		}
	}

    // here you can create indexes, users or other database entities

	return nil
}
